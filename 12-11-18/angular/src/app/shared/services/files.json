getProjectInfo(project: TreeTable) {
    //let projectDays: number = this.baseService.dateDiffInDays(project.startDate, project.endDate);
    // let date = new Date();
    // if (date > project.endDate)
    //   date = project.endDate;
    // let workedDays: number = this.baseService.dateDiffInDays(project.startDate, date);
    // let daysPercent: number = workedDays / projectDays;

    // let projectPresenseHours: number = this.projectService.getPresenceHours(project);
    // let projectPercentHours: number = this.projectService.getPercentHours(project);
    // let state: string;

    // if (projectPercentHours == daysPercent)
    //   state = "good";
    // else
    //   if (projectPercentHours > daysPercent)
    //     state = "excellent";
    //   else
    //     state = "bad"
    let hours = project.Project.QaHours + project.Project.UiUxHours + project.Project.DevelopersHours;
    let actualhorsForProject = this.getActualHoursForProject(project);
    // console.log("hh", this.teamLeader);
    let root = {
      data: {
        name: project.Project.ProjectName,
        teamLeader: project.Project.User.UserName,
        hours: hours,
        // presence: this.baseService.toShortNumber(projectPresenseHours),
        percent: this.getPrecentOfNumbers(hours, actualhorsForProject),
        customer: project.Project.ClientName,
        startDate: project.Project.StartDate,
        endDate: project.Project.FinishDate,
        actualHours: actualhorsForProject
        // days: projectDays,
        // workedDays: workedDays,
        // daysPercent: this.baseService.toPercent(daysPercent),
        // state: state
      },
      children: []
    };
    let actualHoursForDepartment = this.getActualHoursForDepartment(project, "DevelopersHours")
    let departmentNode = {
      data: {
        name: "DevelopersHours",
        hours: project.Project.DevelopersHours,
        actualHours: actualHoursForDepartment,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },

      children: [

      ]
    };
    project.DetailsWorkerInProjects.forEach(worker => {


      if (worker.Kind == "Developers") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            hours: worker.Hours,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode.children.push(workerNode);
      }
    })
    root.children.push(departmentNode);
    let actualHoursForDepartment1 = this.getActualHoursForDepartment(project, "QaHours");
    let departmentNode1 = {
      data: {
        name: "QaHours",
        hours: project.Project.QaHours,
        actualHours: actualHoursForDepartment1,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment1),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },

      children: [

      ]
    };

    project.DetailsWorkerInProjects.forEach(worker => {
      if (worker.Kind == "QA") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            hours: worker.Hours,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode1.children.push(workerNode);
      }
    })
    root.children.push(departmentNode1);
    let actualHoursForDepartment2 = this.getActualHoursForDepartment(project, "UiUxHours");
    let departmentNode2 = {
      data: {
        name: "UiUxHours",
        hours: project.Project.UiUxHours,
        actualHours: actualHoursForDepartment2,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment2),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },
      children: [

      ]
    };

    project.DetailsWorkerInProjects.forEach(worker => {
      if (worker.Kind == "UI/UX") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName,
            hours: worker.Hours
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode2.children.push(workerNode);
      }
    })
    root.children.push(departmentNode2);
    return <TreeNode>(root);
  }

getProjectInfo(project: TreeTable) {
    //let projectDays: number = this.baseService.dateDiffInDays(project.startDate, project.endDate);
    // let date = new Date();
    // if (date > project.endDate)
    //   date = project.endDate;
    // let workedDays: number = this.baseService.dateDiffInDays(project.startDate, date);
    // let daysPercent: number = workedDays / projectDays;

    // let projectPresenseHours: number = this.projectService.getPresenceHours(project);
    // let projectPercentHours: number = this.projectService.getPercentHours(project);
    // let state: string;

    // if (projectPercentHours == daysPercent)
    //   state = "good";
    // else
    //   if (projectPercentHours > daysPercent)
    //     state = "excellent";
    //   else
    //     state = "bad"
    let hours = project.Project.QaHours + project.Project.UiUxHours + project.Project.DevelopersHours;
    let actualhorsForProject = this.getActualHoursForProject(project);
    // console.log("hh", this.teamLeader);
    let root = {
      data: {
        name: project.Project.ProjectName,
        teamLeader: project.Project.User.UserName,
        hours: hours,
        // presence: this.baseService.toShortNumber(projectPresenseHours),
        percent: this.getPrecentOfNumbers(hours, actualhorsForProject),
        customer: project.Project.ClientName,
        startDate: project.Project.StartDate,
        endDate: project.Project.FinishDate,
        actualHours: actualhorsForProject
        // days: projectDays,
        // workedDays: workedDays,
        // daysPercent: this.baseService.toPercent(daysPercent),
        // state: state
      },
      children: []
    };
    let actualHoursForDepartment = this.getActualHoursForDepartment(project, "DevelopersHours")
    let departmentNode = {
      data: {
        name: "DevelopersHours",
        hours: project.Project.DevelopersHours,
        actualHours: actualHoursForDepartment,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },

      children: [

      ]
    };
    project.DetailsWorkerInProjects.forEach(worker => {


      if (worker.Kind == "Developers") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            hours: worker.Hours,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode.children.push(workerNode);
      }
    })
    root.children.push(departmentNode);
    let actualHoursForDepartment1 = this.getActualHoursForDepartment(project, "QaHours");
    let departmentNode1 = {
      data: {
        name: "QaHours",
        hours: project.Project.QaHours,
        actualHours: actualHoursForDepartment1,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment1),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },

      children: [

      ]
    };

    project.DetailsWorkerInProjects.forEach(worker => {
      if (worker.Kind == "QA") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            hours: worker.Hours,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode1.children.push(workerNode);
      }
    })
    root.children.push(departmentNode1);
    let actualHoursForDepartment2 = this.getActualHoursForDepartment(project, "UiUxHours");
    let departmentNode2 = {
      data: {
        name: "UiUxHours",
        hours: project.Project.UiUxHours,
        actualHours: actualHoursForDepartment2,
        percent: this.getPrecentOfNumbers(hours, actualHoursForDepartment2),
        // presence: this.baseService.toShortNumber(presenceHoursForDepartment),
        // percent: departmentHours.numHours > 0 ? this.baseService.toPercent(presenceHoursForDepartment / departmentHours.numHours) : '-'
      },
      children: [

      ]
    };

    project.DetailsWorkerInProjects.forEach(worker => {
      if (worker.Kind == "UI/UX") {
        let actualHoursforWorker = this.getCountHours(worker)
        let workerNode = {
          data: {
            name: worker.Name,
            actualHours: actualHoursforWorker,
            percent: this.getPrecentOfNumbers(hours, actualHoursforWorker),
            teamLeader: worker.TeamLeaderName,
            hours: worker.Hours
            // presence: this.baseService.toShortNumber(presenceHoursForWorker),
            // percent: worker.workerHours.length ? this.baseService.toPercent(presenceHoursForWorker / worker.workerHours[0].numHours) : '-'
          }
        };
        departmentNode2.children.push(workerNode);
      }
    })
    root.children.push(departmentNode2);
    return <TreeNode>(root);
  }